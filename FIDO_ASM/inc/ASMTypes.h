#ifndef __ASMTYPES_H__
#define __ASMTYPES_H__

#include <vector>

using std::vector;

namespace ASMType
{

/* UAF Command Tags */
#define TAG_UAF_REQ_GETINFO                             (0x3401) // Tag for GetInfo command.
#define TAG_UAF_REQ_REGISTER                            (0x3402) // Tag for Register command.
#define TAG_UAF_REQ_SIGN                                (0x3403) // Tag for Sign command.
#define TAG_UAF_REQ_DEREGISTER                          (0x3404) // Tag for Deregister command.
#define TAG_UAF_REQ_OPEN_SETTINGS                       (0x3406) // Tag for OpenSettings command.
#define TAG_UAF_REQ_GETREGISTRATIONS                    (0x3480) // Tag for GetRegistrations command.

#define TAG_UAF_RSP_GETINFO                             (0x3601) // Tag for GetInfo command response.
#define TAG_UAF_RSP_REGISTER                            (0x3602) // Tag for Register command response.
#define TAG_UAF_RSP_SIGN                                (0x3603) // Tag for Sign command response.
#define TAG_UAF_RSP_DEREGISTER                          (0x3604) // Tag for Deregister command response.
#define TAG_UAF_RSP_OPEN_SETTINGS                       (0x3606) // Tag for OpenSettings command response.
#define TAG_UAF_RSP_GETREGISTRATIONS                    (0x3680) // Tag for GetRegistrations command response.

/* UAF Authenticate Commands Tags */
#define TAG_UAF_KEYHANDLE                               (0x2801) // Represents key handle.
#define TAG_UAF_USERNAME_AND_KEYHANDLE                  (0x3802) // Represents an associated Username and key handle.
#define TAG_UAF_USERVERIFY_TOKEN                        (0x2803) // Represents a User Verification Token.
#define TAG_UAF_APPID                                   (0x2804) // A full AppID as a UINT8[] encoding of a UTF-8 string.
#define TAG_UAF_KEYHANDLE_ACCESS_TOKEN                  (0x2805) // Represents a key handle Access Token.
#define TAG_UAF_USERNAME                                (0x2806) // A Username as a UINT8[] encoding of a UTF-8 string.
#define TAG_UAF_ATTESTATION_TYPE                        (0x2807) // Represents an Attestation Type.
#define TAG_UAF_STATUS_CODE                             (0x2808) // Represents a Status Code.
#define TAG_UAF_AUTHENTICATOR_METADATA                  (0x2809) // Represents a more detailed set of authenticator information.
#define TAG_UAF_ASSERTION_SCHEME                        (0x280A) // A UINT8[] containing the UTF8-encoded Assertion Scheme as defined in [UAFRegistry]. ("UAFV1TLV")
#define TAG_UAF_TC_DISPLAY_PNG_CHARACTERISTICS          (0x280B) // If an authenticator contains a PNG-capable transaction confirmation display that is not implemented by a higher-level layer, this tag is describing this display.
#define TAG_UAF_TC_DISPLAY_CONTENT_TYPE                 (0x280C) // A UINT8[] containing the UTF-8-encoded transaction display content type as defined in [UAFAuthnrMetadata]. ("image/png")
#define TAG_UAF_AUTHENTICATOR_INDEX                     (0x280D) // Authenticator Index
#define TAG_UAF_API_VERSION                             (0x280E) // API Version
#define TAG_UAF_AUTHENTICATOR_ASSERTION                 (0x280F) // The content of this TLV tag is an assertion generated by the authenticator. Since authenticators may generate assertions in different formats - the content format may vary from authenticator to authenticator.
#define TAG_UAF_TRANSACTION_CONTENT                     (0x2810) // Represents transaction content sent to the authenticator.
#define TAG_UAF_AUTHENTICATOR_INFO                      (0x3811) // Includes detailed information about authenticator's capabilities.
#define TAG_UAF_SUPPORTED_EXTENSION_ID                  (0x2812) // Represents extension ID supported by authenticator.

#define TAG_UAF_GETREGLIST_RECORD                       (0x3681)

/* UAF Protocol Tags */
#define TAG_UAFV1_REG_ASSERTION                         (0x3E01) // Authenticator response to Register command.
#define TAG_UAFV1_AUTH_ASSERTION                        (0x3E02) // Authenticator response to Sign command.
#define TAG_UAFV1_KRD                                   (0x3E03) // Key Registration Data
#define TAG_UAFV1_SIGNED_DATA                           (0x3E04) // Data signed by authenticator with the UAuth.priv key
#define TAG_ATTESTATION_CERT                            (0x2E05) // Each entry contains a single X.509 DER-encoded [ITU-X690-2008] certificate. Multiple occurrences are allowed and form the attestation certificate chain. Multiple occurrences must be ordered. The attestation certificate itself must occur first. Each subsequent occurrence (if exists) must be the issuing certificate of the previous occurrence.
#define TAG_SIGNATURE                                   (0x2E06) // A cryptographic signature
#define TAG_ATTESTATION_BASIC_FULL                      (0x3E07) // Full Basic Attestation as defined in [UAFProtocol]
#define TAG_ATTESTATION_BASIC_SURROGATE                 (0x3E08) // Surrogate Basic Attestation as defined in [UAFProtocol]
#define TAG_ATTESTATION_ECDAA                           (0x3E09) // Elliptic curve based direct anonymous attestation as defined in [UAFProtocol]. In this case the signature in TAG_SIGNATURE is a ECDAA signature as specified in [FIDOEcdaaAlgorithm].
#define TAG_KEYID                                       (0x2E09) // Represents a KeyID.
#define TAG_FINAL_CHALLENGE_HASH                        (0x2E0A) // Represents a Final Challenge Hash.
#define TAG_AAID                                        (0x2E0B) // Represents an authenticator Attestation ID.
#define TAG_PUB_KEY                                     (0x2E0C) // Represents a Public Key.
#define TAG_COUNTERS                                    (0x2E0D) // Represents a use counters for the authenticator.
#define TAG_ASSERTION_INFO                              (0x2E0E) // Represents assertion information necessary for message processing.
#define TAG_AUTHENTICATOR_NONCE                         (0x2E0F) // Represents a nonce value generated by the authenticator.
#define TAG_TRANSACTION_CONTENT_HASH                    (0x2E10) // Represents a hash of transaction content.
#define TAG_EXTENSION                                   (0x3E11) // This is a composite tag indicating that the content is an extension. (as opposed to tag 0x3E12)
#define TAG_EXTENSION_ID                                (0x2E13) // Represents extension ID. Content of this tag is a UINT8[] encoding of a UTF-8 string.
#define TAG_EXTENSION_DATA                              (0x2E14) // Represents extension data. Content of this tag is a UINT8[] byte array.

/* UAF Status Codes */
#define UAF_STATUS_OK                                   (0x00) // Success
#define UAF_STATUS_ERR_UNKNOWN                          (0x01) // An unknown error
#define UAF_STATUS_ACCESS_DENIED                        (0x02) // Access to this operation is denied
#define UAF_STATUS_USER_NOT_ENROLLED                    (0x03) // User is not enrolled with the authenticator
#define UAF_STATUS_CANNOT_RENDER_TRANSACTION_CONTENT    (0x04) // Transaction content cannot be rendered
#define UAF_STATUS_USER_CANCELLED                       (0x05) // User has cancelled the operation
#define UAF_STATUS_CMD_NOT_SUPPORTED                    (0x06) // Command not supported
#define UAF_STATUS_ATTESTATION_NOT_SUPPORTED            (0x07) // Required attestation not supported


/* FP Command Tags */
#define TAG_FP_REQ_TAG_ENROLL                           (0x3601) //Tag for FP Enroll command request.
#define TAG_FP_REQ_TAG_VERIFY                           (0x3602) //Tag for FP Verify command request.
#define TAG_FP_REQ_TAG_IS_ENROLL                        (0x3603) //Tag for FP Is Enroll command request.
#define TAG_FP_REQ_TAG_RM_ENROLL                        (0x3604) //Tag for FP Remove Enroll command request.
#define TAG_FP_REQ_TAG_GET_ENROLL_LIST                  (0x3605) //Tag for FP Get List command request.
#define TAG_FP_REQ_TAG_TEST_IMAGE						(0x3606)
#define TAG_FP_REQ_TAG_GET_IMAGE                        (0x3609)

#define TAG_FP_RSP_INVALID                              (0x3610)
#define TAG_FP_RSP_ENROLL                               (0x3611) //Tag for FP Enroll command response.
#define TAG_FP_RSP_VERIFY                               (0x3612) //Tag for FP Verify command response.
#define TAG_FP_RSP_IS_ENROLL                            (0x3613) //Tag for FP Is Enroll command response.
#define TAG_FP_RSP_RM_ENROLL                            (0x3614) //Tag for FP Remove Enroll command response.
#define TAG_FP_RSP_GET_ENROLL_LIST                      (0x3615) //Tag for FP Get List command response.
#define TAG_FP_RSP_GET_IMAGE                            (0x3619)
#define TAG_FP_RSP_TEST_IMAGE                           (0x3620)

/* FP Status Codes */
#define FP_STATUS_PLACE_FINGER                          (0x0010)
#define FP_CMD_FINGER_RELEASE                           (0x0011)
#define FP_CMD_FINGER_DUPLICATE                         (0x0012)
#define FP_CMD_FINGER_OK                                (0x0013)
#define FP_CMD_FINGER_FAIL                              (0x0014)
#define FP_STATUS_COMPLETE                              (0x0000)
#define FP_STATUS_FAIL                                  (0x0001)
#define FP_STATUS_ALREADY                               (0x0002)
#define FP_STATUS_ENROLLED                              (0x0000)
#define FP_STATUS_NOT_ENROLLED                          (0x0001)
#define FP_STATUS_INVALID                               (0x0003)
#define FP_STATUS_CONTINUOUS                            (0x0004)
#define FP_STATUS_CLICK									(0x0005)

#define FP_FINGER_NAME_MAX_SIZE                         (256)

/* Utility Tags */
#define FIDO_UTIL_REQ_TAG_INITIALIZE                    (0x3701)
#define FIDO_UTIL_REQ_TAG_RM_DATA_BASE                  (0x3702)
#define FIDO_UTIL_REQ_TAG_RM_CHIP_CNT                   (0x3703)
#define FIDO_UTIL_REQ_TAG_READ_DID                      (0x3704)
#define FIDO_UTIL_REQ_TAG_WRITE_DATA                    (0x3705)

#define FIDO_UTIL_RSP_TAG_INVALID                       (0x3710)
#define FIDO_UTIL_RSP_TAG_INITIALIZE                    (0x3711)
#define FIDO_UTIL_RSP_TAG_RM_DATA_BASE                  (0x3712)
#define FIDO_UTIL_RSP_TAG_RM_CHIP_CNT                   (0x3713)
#define FIDO_UTIL_RSP_TAG_READ_DID                      (0x3714)
#define FIDO_UTIL_RSP_TAG_WRITE_DATA                    (0x3715)

#define FIDO_UTIL_STATUS_COMPLETE                       (0x0000)
#define FIDO_UTIL_STATUS_FAIL                           (0x0001)
#define FIDO_UTIL_STATUS_INVALID                        (0x0002)
#define FP_ENROLL_MAX									(8)

#pragma pack(push, 1)
typedef struct
{
    unsigned short t;
    unsigned short l;
    unsigned char  v[1];
} TLV_t;
#pragma pack(pop)

typedef enum
{
    GetInfo = 0,
    Register,
    Authenticate,
    Deregister,
    GetRegistrations,
    OpenSettings,
    FPEnroll,
    FPVerify,
    FPEnrollCheck,
    FPRemove,
    FPGetList,
    FPGetImage,
	FPTestImage,
	FPVerifyImage,
    FWUpdate,
    GetDeviceID,
	SDBInit,
	FIDOInit,
    RequestMax
} asmRequest_t;

const char asmRequest[RequestMax][32] = {
    "GetInfo",
    "Register",
    "Authenticate",
    "Deregister",
    "GetRegistrations",
    "OpenSettings",
    "FPEnroll",
    "FPVerify",
    "FPEnrollCheck",
    "FPRemove",
    "FPGetList",
    "FPGetImage",
	"FPTestImage",
	"FPVerifyImage",
    "FWUpdate",
    "GetDeviceID",
	"SDBInit",
	"FIDOInit",
};

/* ASM StatusCode */
#define UAF_ASM_STATUS_OK                                      (0x00)
#define UAF_ASM_STATUS_ERROR                                   (0x01)
#define UAF_ASM_STATUS_ACCESS_DENIED                           (0x02)
#define UAF_ASM_STATUS_USER_CANCELLED                          (0x03)
#define UAF_ASM_STATUS_CANNOT_RENDER_TRANSACTION_CONTENT       (0x04)
#define UAF_ASM_STATUS_KEY_DISAPPEARED_PERMANENTLY             (0x09)
#define UAF_ASM_STATUS_AUTHENTICATOR_DISCONNECTED              (0x0b)
#define UAF_ASM_STATUS_USER_NOT_RESPONSIVE                     (0x0e)
#define UAF_ASM_STATUS_INSUFFICIENT_AUTHENTICATOR_RESOURCES    (0x0f)
#define UAF_ASM_STATUS_USER_LOCKOUT                            (0x10)
#define UAF_ASM_STATUS_USER_NOT_ENROLLED                       (0x11)
#define UAF_ASM_STATUS_CONTINUE								   (0x12)

/* ASMRequest Dictionary */
#pragma pack(push, 1)
typedef struct
{
    unsigned short major;
    unsigned short minor;
} Version_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
	unsigned int testUserid;
	unsigned int handIndex;
	unsigned int handCount;
	unsigned int enrollCount;
	unsigned int angle;
} FingerInfo_t;
#pragma pack(pop)


#pragma pack(push, 1)
typedef struct
{
    unsigned char* id;
    unsigned char* data;
    bool           fail_if_unknown;
} Extension_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    asmRequest_t   requestType;
    Version_t      asmVersion;
    unsigned short authenticatorIndex;
    void*          args;
    Extension_t*   exts;
} ASMRequest_t;
#pragma pack(pop)

/* ASMResponse Dictionary */
#pragma pack(push, 1)
typedef struct
{
    unsigned short statusCode;
    void*          responseData;
    Extension_t*   exts;
} ASMResponse_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
	unsigned short statusCode;
	unsigned short responseType;
	char operation[4];
	char count[4];
	char raw[256];
	char bmp[256];
} TESTASMResponse_t;
#pragma pack(pop)

/* GetInfoOut Dictionary */
#pragma pack(push, 1)
typedef struct
{
    unsigned short    r;
    unsigned short    g;
    unsigned short    b;
} RGBPalletteEntry_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    unsigned int      width;
    unsigned int      height;
    unsigned char     bitDepth;
    unsigned char     colorType;
    unsigned char     compression;
    unsigned char     filter;
    unsigned char     interlace;
    RGBPalletteEntry_t* plte;
} DisplayPNGCharacteristicsDescriptor_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    unsigned short    authenticatorIndex;
    Version_t*        asmVersions;
    bool              isUserEnrolled;
    bool              hasSettings;
    unsigned char*    aaid;
    unsigned char*    assertionScheme;
    unsigned short    authenticationAlgorithm;
    unsigned short    attestationTypes;
    unsigned int      userVerification;
    unsigned short    keyProtection;
    unsigned short    matcherProtection;
    unsigned int      attachmentHint;
    bool              isSecondFactorOnly;
    bool              isRoamingAuthenticator;
    unsigned char*    supportedExtensionIDs;
    unsigned short    tcDisplay;
    unsigned char*    tcDisplayContentType;
    DisplayPNGCharacteristicsDescriptor_t* tcDisplayPNGCharacteristics;
    unsigned char*    title;
    unsigned char*    description;
    unsigned char*    icon;
} AuthenticatorInfo_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    AuthenticatorInfo_t* Authenticators;
} GetInfoOut_t;
#pragma pack(pop)



/* RegisterIn Dictionary */
#define APPID_MAX                 (512)
#define FINALCHALLENGE_MAX        (512)

#pragma pack(push, 1)
typedef struct
{
	unsigned char*    appID;
	unsigned char*    username;
	unsigned char*    finalChallenge;
	unsigned short    attestationType;
} RegisterIn_t;
#pragma pack(pop)

/* RegisterOut Dictionary */
#pragma pack(push, 1)
typedef struct
{
	unsigned char*    assertion;
	unsigned char*    assertionScheme;
	unsigned char*    keyHandle;
} RegisterOut_t;
#pragma pack(pop)

/* AuthenticateIn Dictionary */
#pragma pack(push, 1)
typedef struct
{
	unsigned char*    contentType;
	unsigned char*    content;
	DisplayPNGCharacteristicsDescriptor_t tcDisplayPNGCharacteristics;
} Transaction_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
	unsigned char*    appID;
	unsigned char*    keyIDs;
	unsigned char*    keyHandle;
	unsigned char*    finalChallenge;
	Transaction_t*    transaction;
} AuthenticateIn_t;
#pragma pack(pop)

/* AuthenticateOut Dictionary */
#pragma pack(push, 1)
typedef struct
{
	unsigned char*    userName;
	unsigned char*    keyHandle;
} UserNameAndKeyHandle_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
	unsigned char*    assertion;
	unsigned char*    assertionScheme;
	int userNameAndKeyHadleCount;
	vector<UserNameAndKeyHandle_t> userNameAndKeyHadle;
} AuthenticateOut_t;
#pragma pack(pop)



/* DeregisterIn Dictionary */
#pragma pack(push, 1)
typedef struct {
	unsigned char*    appID;
	unsigned char*    keyID;
} DeregisterIn_t;
#pragma pack(pop)

/* DeregisterOut Dictionary */
#pragma pack(push, 1)
typedef struct {
	unsigned char*    assertion;
	unsigned char*    assertionScheme;
} DeregisterOut_t;
#pragma pack(pop)



/* GetRegistratiosOut Dictionary */
#define USERNAME_MAX                       (128)
#define REGISTRATION_KEYID_COUNT_MAX       (1)
#define REGISTRATION_KEYID_SIZE_MAX        (32)
#pragma pack(push, 1)
typedef struct {
	unsigned char     userName[USERNAME_MAX];
	unsigned char     keyID[REGISTRATION_KEYID_COUNT_MAX][REGISTRATION_KEYID_SIZE_MAX*2];
} AppRegistration_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct {
	int appRegsCount;
	vector<AppRegistration_t> appRegs;
} GetRegistrationsOut_t;
#pragma pack(pop)

typedef enum
{
    FINGER_INDEX_0 = 0,
    FINGER_INDEX_1,
    FINGER_INDEX_2,
    FINGER_INDEX_MAX
} FP_Index;

#pragma pack(push, 1)
typedef struct
{
    unsigned short     index;
    unsigned short     nameLen;
    unsigned char      name[1];
} FP_Name_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    unsigned short     index;
    unsigned short     imageSize;
    unsigned char      image[1];
} FP_Image_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    unsigned short     tag;
    unsigned short     len;
    unsigned short     index;
    unsigned short     nameLen;
    unsigned char      name[1];
} FP_Req_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    unsigned short     tag;
    unsigned short     len;
    unsigned short     value;
    unsigned char      data[1];
} FP_Rsp_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    unsigned short     cmd;
    unsigned char      count;
    unsigned char      total;
} FP_Enroll_Rsp_t;
#pragma pack(pop)

#define FP_NAME_MAX    (256)
#pragma pack(push, 1)
typedef struct
{
	unsigned short index;
	char name[FP_NAME_MAX];
} FPIndexAndName_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
    unsigned short statusCode;
    unsigned short responseType;
	int fpCount;
	FPIndexAndName_t fpIndexAndNameHandle[FINGER_INDEX_MAX];
} FPGetListOut_t;
#pragma pack(pop)

#define FIME_NAME_MAX    (256)
#pragma pack(push, 1)
typedef struct
{
    unsigned short statusCode;
    unsigned short responseType;
	char raw[FIME_NAME_MAX];
	char bmp[FIME_NAME_MAX];
} FPGetImageOut_t;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
	unsigned short statusCode;
	unsigned short responseType;
	unsigned short AutoIndex;
	char operation[4];
	char count[4];
	char raw[FIME_NAME_MAX];
	char bmp[FIME_NAME_MAX];
} FPTestImageOut_t;
#pragma pack(pop)

/* FirmwareUpdateIn Dictionary */
#pragma pack(push, 1)
typedef struct {
    unsigned char*    fileName;
} FirmwareUpdateIn_t;
#pragma pack(pop)

/* FirmwareUpdateOut Dictionary */
#pragma pack(push, 1)
typedef struct {
    unsigned short     statusCode;
    unsigned short     responseType;
    unsigned int       progress;
} FirmwareUpdateOut_t;
#pragma pack(pop)



/* GetDeviceIDOut Dictionary */
#pragma pack(push, 1)
typedef struct {
    unsigned short     statusCode;
    unsigned short     responseType;
    unsigned char      deviceID[8];
} GetDeviceIDOut_t;
#pragma pack(pop)

} /* namespace ASMType */

#endif // __ASMTYPES_H__
